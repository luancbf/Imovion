// Tipos de usu√°rio dispon√≠veis no sistema
export const TIPOS_USUARIO = {
  PROPRIETARIO: 'proprietario',
  IMOBILIARIA: 'imobiliaria', 
  CORRETOR: 'corretor'
} as const;

export type TipoUsuario = typeof TIPOS_USUARIO[keyof typeof TIPOS_USUARIO];

// Planos de pagamento dispon√≠veis
export const PLANOS = {
  COMUM: 'comum',
  PLANO_5: '5_imoveis',
  PLANO_30: '30_imoveis', 
  PLANO_50: '50_imoveis',
  PLANO_100: '100_imoveis'
} as const;

export type PlanoUsuario = typeof PLANOS[keyof typeof PLANOS];

// Configura√ß√µes dos planos
export const CONFIGURACAO_PLANOS = {
  [PLANOS.COMUM]: {
    nome: 'Comum',
    descricao: 'Pagamento por im√≥vel',
    limite_imoveis: null, // sem limite, paga por im√≥vel
    preco_imovel: 50, // R$ 50 por im√≥vel
    preco_mensal: null,
    cor: 'bg-gray-100 text-gray-800',
    icone: 'üè†'
  },
  [PLANOS.PLANO_5]: {
    nome: 'Plano 5 Im√≥veis',
    descricao: 'At√© 5 im√≥veis por m√™s',
    limite_imoveis: 5,
    preco_imovel: null,
    preco_mensal: 150, // R$ 150/m√™s
    cor: 'bg-blue-100 text-blue-800',
    icone: 'üìç'
  },
  [PLANOS.PLANO_30]: {
    nome: 'Plano 30 Im√≥veis',
    descricao: 'At√© 30 im√≥veis por m√™s',
    limite_imoveis: 30,
    preco_imovel: null,
    preco_mensal: 300, // R$ 300/m√™s
    cor: 'bg-green-100 text-green-800',
    icone: 'üè¢'
  },
  [PLANOS.PLANO_50]: {
    nome: 'Plano 50 Im√≥veis',
    descricao: 'At√© 50 im√≥veis por m√™s',
    limite_imoveis: 50,
    preco_imovel: null,
    preco_mensal: 450, // R$ 450/m√™s
    cor: 'bg-orange-100 text-orange-800',
    icone: 'üèòÔ∏è'
  },
  [PLANOS.PLANO_100]: {
    nome: 'Plano 100 Im√≥veis',
    descricao: 'At√© 100 im√≥veis por m√™s',
    limite_imoveis: 100,
    preco_imovel: null,
    preco_mensal: 700, // R$ 700/m√™s
    cor: 'bg-purple-100 text-purple-800',
    icone: 'üèôÔ∏è'
  }
} as const;

// Labels para tipos de usu√°rio
export const LABELS_TIPO_USUARIO = {
  [TIPOS_USUARIO.PROPRIETARIO]: {
    nome: 'Propriet√°rio',
    descricao: 'Propriet√°rio de im√≥veis',
    cor: 'bg-gray-100 text-gray-800',
    icone: 'üë§'
  },
  [TIPOS_USUARIO.IMOBILIARIA]: {
    nome: 'Imobili√°ria',
    descricao: 'Empresa imobili√°ria',
    cor: 'bg-blue-100 text-blue-800',
    icone: 'üè¢'
  },
  [TIPOS_USUARIO.CORRETOR]: {
    nome: 'Corretor',
    descricao: 'Corretor de im√≥veis',
    cor: 'bg-green-100 text-green-800',
    icone: 'ü§ù'
  }
} as const;

// Fun√ß√£o utilit√°ria para obter configura√ß√£o do plano
export function getConfiguracaoPlano(plano: PlanoUsuario) {
  return CONFIGURACAO_PLANOS[plano];
}

// Fun√ß√£o utilit√°ria para obter label do tipo de usu√°rio
export function getLabelTipoUsuario(tipo: TipoUsuario | string | null | undefined) {
  // Tratar valores nulos ou undefined
  if (!tipo) {
    console.warn('getLabelTipoUsuario: tipo √© null/undefined, usando proprietario como fallback');
    return LABELS_TIPO_USUARIO[TIPOS_USUARIO.PROPRIETARIO];
  }
  
  // Mapear valores antigos para novos
  let tipoNormalizado: TipoUsuario;
  if (tipo === 'usuario') {
    console.warn('getLabelTipoUsuario: convertendo "usuario" para "proprietario"');
    tipoNormalizado = TIPOS_USUARIO.PROPRIETARIO;
  } else {
    tipoNormalizado = tipo as TipoUsuario;
  }
  
  // Verificar se o tipo √© v√°lido
  const label = LABELS_TIPO_USUARIO[tipoNormalizado];
  if (!label) {
    console.error('getLabelTipoUsuario: tipo inv√°lido encontrado:', tipo, 'usando proprietario como fallback');
    return LABELS_TIPO_USUARIO[TIPOS_USUARIO.PROPRIETARIO];
  }
  
  return label;
}

// Fun√ß√£o para verificar se usu√°rio pode adicionar mais im√≥veis
export function podeAdicionarImovel(plano: PlanoUsuario, imoveisAtivos: number): boolean {
  const config = CONFIGURACAO_PLANOS[plano];
  
  if (config.limite_imoveis === null) {
    return true; // Plano comum sem limite
  }
  
  return imoveisAtivos < config.limite_imoveis;
}

// Fun√ß√£o para calcular custo baseado no plano
export function calcularCusto(plano: PlanoUsuario, quantidade?: number): number {
  const config = CONFIGURACAO_PLANOS[plano];
  
  if (config.preco_mensal) {
    return config.preco_mensal;
  }
  
  if (config.preco_imovel && quantidade) {
    return config.preco_imovel * quantidade;
  }
  
  return 0;
}